// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// CreateTransactionBadRequest is response for CreateTransaction operation.
type CreateTransactionBadRequest struct{}

func (*CreateTransactionBadRequest) createTransactionRes() {}

type CreateTransactionSourceType string

const (
	CreateTransactionSourceTypeGame    CreateTransactionSourceType = "game"
	CreateTransactionSourceTypeServer  CreateTransactionSourceType = "server"
	CreateTransactionSourceTypePayment CreateTransactionSourceType = "payment"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateTransactionSourceType) MarshalText() ([]byte, error) {
	switch s {
	case CreateTransactionSourceTypeGame:
		return []byte(s), nil
	case CreateTransactionSourceTypeServer:
		return []byte(s), nil
	case CreateTransactionSourceTypePayment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTransactionSourceType) UnmarshalText(data []byte) error {
	switch CreateTransactionSourceType(data) {
	case CreateTransactionSourceTypeGame:
		*s = CreateTransactionSourceTypeGame
		return nil
	case CreateTransactionSourceTypeServer:
		*s = CreateTransactionSourceTypeServer
		return nil
	case CreateTransactionSourceTypePayment:
		*s = CreateTransactionSourceTypePayment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string       `json:"message"`
	Data    OptErrorData `json:"data"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetData returns the value of Data.
func (s *Error) GetData() OptErrorData {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *Error) SetData(val OptErrorData) {
	s.Data = val
}

func (*Error) createTransactionRes() {}

type ErrorData map[string]jx.Raw

func (s *ErrorData) init() ErrorData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptErrorData returns new OptErrorData with value set to v.
func NewOptErrorData(v ErrorData) OptErrorData {
	return OptErrorData{
		Value: v,
		Set:   true,
	}
}

// OptErrorData is optional ErrorData.
type OptErrorData struct {
	Value ErrorData
	Set   bool
}

// IsSet returns true if OptErrorData was set.
func (o OptErrorData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorData) Reset() {
	var v ErrorData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorData) SetTo(v ErrorData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorData) Get() (v ErrorData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorData) Or(d ErrorData) ErrorData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	// The state of the request (win or lost).
	State TransactionState `json:"state"`
	// The amount of the request.
	Amount float64 `json:"amount"`
	// The transaction ID of the request.
	TransactionId string `json:"transactionId"`
}

// GetState returns the value of State.
func (s *Transaction) GetState() TransactionState {
	return s.State
}

// GetAmount returns the value of Amount.
func (s *Transaction) GetAmount() float64 {
	return s.Amount
}

// GetTransactionId returns the value of TransactionId.
func (s *Transaction) GetTransactionId() string {
	return s.TransactionId
}

// SetState sets the value of State.
func (s *Transaction) SetState(val TransactionState) {
	s.State = val
}

// SetAmount sets the value of Amount.
func (s *Transaction) SetAmount(val float64) {
	s.Amount = val
}

// SetTransactionId sets the value of TransactionId.
func (s *Transaction) SetTransactionId(val string) {
	s.TransactionId = val
}

func (*Transaction) createTransactionRes() {}

// The state of the request (win or lost).
type TransactionState string

const (
	TransactionStateWin  TransactionState = "Win"
	TransactionStateLost TransactionState = "Lost"
)

// MarshalText implements encoding.TextMarshaler.
func (s TransactionState) MarshalText() ([]byte, error) {
	switch s {
	case TransactionStateWin:
		return []byte(s), nil
	case TransactionStateLost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionState) UnmarshalText(data []byte) error {
	switch TransactionState(data) {
	case TransactionStateWin:
		*s = TransactionStateWin
		return nil
	case TransactionStateLost:
		*s = TransactionStateLost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
