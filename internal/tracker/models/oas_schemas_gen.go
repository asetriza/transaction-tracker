// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// CreateTransactionBadRequest is response for CreateTransaction operation.
type CreateTransactionBadRequest struct{}

func (*CreateTransactionBadRequest) createTransactionRes() {}

// CreateTransactionInternalServerError is response for CreateTransaction operation.
type CreateTransactionInternalServerError struct{}

func (*CreateTransactionInternalServerError) createTransactionRes() {}

type CreateTransactionSourceType string

const (
	CreateTransactionSourceTypeGame    CreateTransactionSourceType = "game"
	CreateTransactionSourceTypeServer  CreateTransactionSourceType = "server"
	CreateTransactionSourceTypePayment CreateTransactionSourceType = "payment"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateTransactionSourceType) MarshalText() ([]byte, error) {
	switch s {
	case CreateTransactionSourceTypeGame:
		return []byte(s), nil
	case CreateTransactionSourceTypeServer:
		return []byte(s), nil
	case CreateTransactionSourceTypePayment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTransactionSourceType) UnmarshalText(data []byte) error {
	switch CreateTransactionSourceType(data) {
	case CreateTransactionSourceTypeGame:
		*s = CreateTransactionSourceTypeGame
		return nil
	case CreateTransactionSourceTypeServer:
		*s = CreateTransactionSourceTypeServer
		return nil
	case CreateTransactionSourceTypePayment:
		*s = CreateTransactionSourceTypePayment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	// The state of the request (win or lost).
	State TransactionState `json:"state"`
	// The amount of the request.
	Amount float64 `json:"amount"`
	// The transaction ID of the request.
	TransactionId string `json:"transactionId"`
}

// GetState returns the value of State.
func (s *Transaction) GetState() TransactionState {
	return s.State
}

// GetAmount returns the value of Amount.
func (s *Transaction) GetAmount() float64 {
	return s.Amount
}

// GetTransactionId returns the value of TransactionId.
func (s *Transaction) GetTransactionId() string {
	return s.TransactionId
}

// SetState sets the value of State.
func (s *Transaction) SetState(val TransactionState) {
	s.State = val
}

// SetAmount sets the value of Amount.
func (s *Transaction) SetAmount(val float64) {
	s.Amount = val
}

// SetTransactionId sets the value of TransactionId.
func (s *Transaction) SetTransactionId(val string) {
	s.TransactionId = val
}

func (*Transaction) createTransactionRes() {}

// The state of the request (win or lost).
type TransactionState string

const (
	TransactionStateWin  TransactionState = "Win"
	TransactionStateLost TransactionState = "Lost"
)

// MarshalText implements encoding.TextMarshaler.
func (s TransactionState) MarshalText() ([]byte, error) {
	switch s {
	case TransactionStateWin:
		return []byte(s), nil
	case TransactionStateLost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionState) UnmarshalText(data []byte) error {
	switch TransactionState(data) {
	case TransactionStateWin:
		*s = TransactionStateWin
		return nil
	case TransactionStateLost:
		*s = TransactionStateLost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
